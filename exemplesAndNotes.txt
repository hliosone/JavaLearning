import java.util.Arrays;
import java.util.StringTokenizer; //pour utiliser Str Builder/Buffer

import fr.sstelcher.*;

public class App {
    public static void main(String[] args) {
      System.out.println("Hello world!");
      Player One = new Player("Stan");
      Player Two = new Player("Stan");
      Player Three = new Player("Stan");
      Player Four = new Player("Stan");
      Four.displayName();

      int tab[] = new int[5];
      Arrays.fill(tab, 15);

      //String est immuable, en reaffectant une valeur on va en fait detruire l'ancienne et la
      // liberer de la memoire et en creer une nouvelle
      String test1 = "Test";
      String test2 = "reussi";
      String test3 = "Reussi";

      System.out.println(test1.concat(" ").concat(test2).concat(" !"));
      // concat est plus rapide que +

      //string.trim() va supprimer tous les espaces
      //.replace('carac ou string', 'carac' ou string) va remplacer toutes les appearances par la nouvelle

      System.out.println(test1.charAt(0));
      System.out.println(test1.substring(0, 3)); 
      //.substring(pos, pos exclue);

      System.out.println(test3.equals(test2));
      System.out.println(test3.compareTo(test2)); //compare les codes ascii et renvoie la difference en entier

      String s = "C/ProgramFiles/user/sst";
      StringTokenizer st = new StringTokenizer(s, "/"); // on peut rajouter true en argument pour recup
      // aussi les delimiteurs

      while (st.hasMoreTokens()){
        System.out.println(st.nextToken());
      }

      System.out.println("Taille est : "+ test3.length()); 

      StringBuilder newS = new StringBuilder(); //Cree une string avec des methodes particulieres qui seront possible
      //.capacity() pour la capacité sur une StringBuilder tandis que sur une string capacité = taille car new object
      // string n'est pas muable tandis que StringBuilder l'est
      //.append(blabla)
      //StringBuilder only mono thread

      StringBuffer newS2 = new StringBuffer(); // pour multi thread, thread safe
      //Pareil que StringBuilder pour les méthodes
      

      for (int el : tab){
        System.out.print(el + " ");
      }
      //tab.toString()
  }
}
  /*
\n : nouvelle ligne
\t : tabulation
\r : retour chariot
\b : retour arrière
\f : nouvelle page
\' \" (Protection)
   */

      InputStreamReader isr = new InputStreamReader(System.in); //atends un flux à lire
      BufferedReader br = new BufferedReader(isr); /*Va permettre de faire de la lecture de données
      est thread safe (synchrone)
      considere que toute saisie faite est une chaine de caractere (String)
      Buffer de 8192 caracteres
      Méthodes : 
      - read() : lire un caractere
      - readLine() : lire une chaine, peut lever une exception
      - skip(N) : ignore N caractères
      */

      Scanner sc = new Scanner(System.in); 
      /* Prend direct un inputStream en parametre
      plus lent et pas thread safe, est asynchrone
      lecture de donnees + parsing (verifications, controles, etc)
      Buffer de 1024 caracteres
      Méthodes :
      - nextLine()
      - nextChar()
      - nextInt()
      etc ...
      */
      System.out.print("Comment t'appelle tu ? ");
      String name = br.readLine();
      System.out.println(name);

      System.out.print("A quel niveau acceder ? ");
      int gameLevel = sc.nextInt();
      System.out.println(gameLevel);

      Scanner sc = new Scanner(System.in);
      try{
        System.out.print("A quel niveau voulez-vous acceder ? : ");
        int gameLevel = sc.nextInt();
        System.out.println(gameLevel);
      } catch(InputMismatchException e){
        System.out.println("Le niveau n'existe pas !");
        e.printStackTrace(); //nous affiche l'erreur en détails
        //System.out.println("Erreur : " + e.getMessage()); Pareil que au dessus normalement
        
      } // on peut enchainer les catchs, on met les plus potentiels en premier
      catch (Exception e){
        System.out.println("Il y a eu un probleme dans le jeu, redémarrez");
      } finally { //quoiquil arrive on continuera cette partie du programme
        System.out.println("Ok fin");
      }

      on peut lever une exception comme en C++ : ne pas oublier de rajouter throws Exception a la declaration de la
      classe pour indiquer que cela peut lever une exception
      ex : throw new Exception("Valeur incorrecte")

      On peut même se creer une classe PlayerException qui extends la classe Exception par exemple



      HERITAGE :


      //final veut dire que la classe sera non extendable
public final class DonjonGuardian extends Player

// Dans la classe mere
//protected permet l'accès aux variables pour les classes qui heritent de la classe
    //reste private sinon
    protected static int nbPlayer = 0;
    protected String name;

public DonjonGuardian(String name, String _medal){
super(name); //creer une instance avec le constructeur mere

//super va permettre ici d'utiliser la methode de la classe parente si la meme existe dans notre classe
public void displayTestS(){
        super.displayTest();
    }

//on peut aussi mettre super sur une methode si on veut quelle ne soit dupliquee et redefinie sur une classe enfant
// pareil sur un attribut de classe
//pareil sur un attribut dans une fonction
//final peut etre consideree comme une constante aussi
exemple sur la classe mere :

public final void move( blbla ){
    // si une methode move existe dans notre classe enfant elle ne pourra pas etre utilisee 
}


abstract public class // permet de creer une classe abstraite
sert de sorte de reference

Abstract polymorphism enum :

DonjonGuardian BouftouRoyal = new DonjonGuardian("Bouftou Royal", "Amulette");
  
      //permet de verifier si un objet est une instance d'une classe precisee
      if(BouftouRoyal instanceof DonjonGuardian){   System.out.println("C'est bien un gardien de donjon !");
      }
      Player One = new Player("Stan");
      One.displayName();

      Gamer[] gamersList = {new Player("Stan"), new Player("King"), new DonjonGuardian("Boufton", "Amulette Boufton")};

      for(Gamer e : gamersList){
        e.voler();
      }

      EquipmentColor favColor = EquipmentColor.RED;

      System.out.println(favColor.name()); //nom de l'element
      System.out.println(favColor.ordinal()); // indice de l'element dans l'enum (l'ordre)
      System.out.println(favColor.toString()); // methode

      //Boucler sur l'enumeration
      for(EquipmentColor e : EquipmentColor.values()){
        System.out.println(e);
      }


GESTION DES FICHIERS :

 Path f = Paths.get("pathtest.txt"); //Declaration de notre path
      Path newF = Paths.get("brandNewFile.txt");
      Path dir = Paths.get("myNewDir");
      Path fileDestination = dir.resolve(newF); //Si on passe un autre argument on modifiera le nom final de destination

      BufferedReader bfrRead = null;
      BufferedWriter bfrWrite = null;
      //StandardOpenOption mode = StandardOpenOption.TRUNCATE_EXISTING; // va overwrite le fichier existant
      //StandardOpenOption mode = StandardOpenOption.CREATE_NEW; //va creer un fichier et renvoyer une erreur sil existe deja
      StandardOpenOption mode = StandardOpenOption.APPEND; //va append au fichier
      //StandardOpenOption mode = StandardOpenOption.DELETE_ON_CLOSE; //va supprimer le fichier a la fermeture

      //encodage du fichier, par defaut est deja en UTF-8
      Charset c = Charset.forName("UTF-8");

      try{
        //Files.exists(f) return boolean exists or not
        //Files.isDirectory(f) return boolean is directory or not
        //Files.isRegularFile(f) return boolean is file or not


        //Files.move(newF, fileDestination); //peut lever une exception pour move
        //Files.copy(newF, fileDestination); //peut lever une exception, pour copier et coller
        //System.out.println(Files.size(fileSource)) nous donne la taille dun fichier en octet

        //Files.delete(fileDestination); //peut lever une exception, pour delete 
        //Files.deleteIfExists(fileDestination); //peut lever une exception, pour delete si existe

        //Files.createFile(newF);
        //Files.createDirectory(dir); // create new directory
        bfrRead = Files.newBufferedReader(f); //ouverture d'un buffer qui va lire les donnes
        //bfrRead.skip(2); //le pointeur va skip les deux premieres caracteres

        System.out.println(bfrRead.readLine());
        System.out.println(bfrRead.readLine()); // pointeur qui va lire la seconde ici
        bfrRead.close(); //fermeture du buffer

        bfrWrite = Files.newBufferedWriter(f, c/*pas obligé */, mode); //ouverture d'un buffer qui va ecrire des donnes
        bfrWrite.newLine();
        bfrWrite.write("Nouvel ajout !");
        bfrWrite.newLine();
        bfrWrite.write("Et encore un autre !");
        bfrWrite.close();

      } catch (IOException e){
        System.out.println("IO Exception : " + e.getMessage());
      }catch (Exception e){
        System.out.println("Exception : " + e.getMessage());
      }


      UTILISATION DES THREADS (Traitement asynchrone)

      //Utilisation des threads
import java.lang.Thread;
import java.util.concurrent.Executors;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;



//importation des classes (package)
import fr.sstelcher.*;


/*
 * class MyTask implements Runnable{
 * public void run(){
 * 
 * }}
 * 
 * dans notre code ensuite exemple :
 * 
 * Thread task = new Thread(new MyTask());
 * task.start();
 */

 /*newSingleThreadExecutor //un seul thread qui s'occupe d'une tache
  *newCachedThreadPool // on peut avoir aussi un nombre dynamique de thread si on a besoin d'aller plus vite
  *newFixedThreadPool //traitement plus long qui prennent du temps
  */
public class App extends Thread {
  /*//il faut extends la class a Thread
  public void run(){ // la methode de run thread doit s'appeler run() et avoir cette synthaxe : public void

    for(int i = 0; i < 5; ++i){
      System.out.println(i);

      try{
        Thread.sleep(1000); //va delay le thread de 1seconde
      } catch(InterruptedException e){
        System.out.println("Probleme pour le delay");
            }
    }

  } */

  public static void main(String[] args) throws Exception {
    /* App task1 = new App(); //creation d'un thread
     App task2 = new App();

     System.out.println("Les threads démarrent !");
     task1.start(); //demarre le thread
     task2.start();

     /*task1.join(); //Va specifier au thread d'attendre un autre thread pour le rejoindre et se synchroniser
     //exemple si task 2 a plus d'iterations bah task1 aurait attendu task2
     task2.join();

     System.out.println("Les threads sont finis !");
     */

     //ExecutorService ex = Executors.newSingleThreadExecutor(); //Traitement sequentielle un par un car on travaille avec un seul thread
      ExecutorService ex = Executors.newCachedThreadPool(); //Traitement sequentielle un par un car on travaille avec un seul thread

     Runnable task1 = () ->{
      for(int i = 0; i < 5; ++i){
      System.out.println(i);

      try{
        Thread.sleep(1000); //va delay le thread de 1seconde
      } catch(InterruptedException e){
        System.out.println("Probleme pour le delay");
            }
    }
    };

    Runnable task2 = () ->{
      for(int i = 5; i < 9; ++i){
      System.out.println(i);

      try{
        Thread.sleep(1000); //va delay le thread de 1seconde
      } catch(InterruptedException e){
        System.out.println("Probleme pour le delay");
            }
    }
    };

   /*  ex.execute(task1); //Pourquoi il commence par la 2 une fois sur deux? Moyen de choisir? avec newCachedThreadPool ?
    ex.execute(task2); */

    Future <?> fut1 = ex.submit(task1, "Je suis la task1 j'ai fini"); //Interface qui permet d'avoir le resultat des diffentes taches asynchrones
    Future <?> fut2 = ex.submit(task2);
    /*
     * Methodes :
     * - isDone()
     * - isCancelled()
     * - get()
     * - cancel()
     */

     while(!fut1.isDone() && !fut2.isDone()){
      System.out.println("On attends");
      try {
        Thread.sleep(1000);
      } catch (InterruptedException e) {}
     }

    ex.shutdown(); // MARCHE seulement en creant un ExecutorService

    if (fut1.isDone()){
      try{
        System.out.println(fut1.get()); //renvoie du result passe en parametre
      } catch (Exception e){}
     }
}
}
